package com.rmaciel.hibernateconfigexample.util;

import java.util.Properties;

import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.cfg.Environment;
import org.hibernate.service.ServiceRegistry;

import com.rmaciel.hibernateconfigexample.entity.User;


/** HibernateUtil - this is helper class to bootstrap hibernate SessionFactory. in most hibernate applications
 * the SessionFactory should be instantiated once during application initialization. The single instance
 * should then be used by all code in a particular process, and any Session should be created using this single
 * SessionFactory. The SessionFactory is trade-safe and be shared, a Session is a single-treaded object.
*/
public class HibernateUtil {
	private static SessionFactory sessionFactory;
	public static SessionFactory getSessionFactory() {
		if (sessionFactory == null) {
			try {
				Configuration configuration = new Configuration();
				
				// Hibernate settings equivalent to hibernate.cfg.xml's properties
				Properties settings = new Properties();
				settings.put(Environment.DRIVER, "com.mysql.jdbc.Driver");
				settings.put(Environment.URL, "jdbc:mysql://localhost:3306/hibernate_config_db?useSSL=false");
				settings.put(Environment.USER, "root");
				settings.put(Environment.PASS, "Hardc195");
				settings.put(Environment.DIALECT, "org.hibernate.dialect.MySQL5Dialect");
				
				settings.put(Environment.SHOW_SQL, "true");
				settings.put(Environment.CURRENT_SESSION_CONTEXT_CLASS, "thread");
				settings.put(Environment.HBM2DDL_AUTO, "create-drop");
				
				configuration.setProperties(settings);
				
				// Add JPA entity mapping class
				configuration.addAnnotatedClass(User.class);
				
				// ServiceRegisty: holds the services that hibernate will need during bootstrapping and at runtime
				ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
						.applySettings(configuration.getProperties()).build();
				
				sessionFactory = configuration.buildSessionFactory(serviceRegistry);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		return sessionFactory;
	}

}
